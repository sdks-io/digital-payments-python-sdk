# -*- coding: utf-8 -*-

"""
shellev

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellev.api_helper import APIHelper
from shellev.models.loyalty_details import LoyaltyDetails
from shellev.models.payment_details_items import PaymentDetailsItems
from shellev.models.prepare_fueling_request_device_details_items import PrepareFuelingRequestDeviceDetailsItems


class PrepareFuelingRequest(object):

    """Implementation of the 'PrepareFuelingRequest' model.

    TODO: type model description here.

    Attributes:
        latitude (float): The user’s current latitude
        longitude (float): The user’s current longitude
        maximum_fueling_amount (float): The maximum fuelling amount that can
            be purchased. If the prepare fuelling is successful and the
            Customer starts fuelling their car, the pump will cut off once
            this threshold is reached. For B2B customers a maximum ceiling is
            set against their Shell Card. As a result, this can be left blank
            for B2B customers. If a value is provided it cannot be zero or
            lower and values that exceed ceiling will be ignored.
        station_id (str): Expectation is that a user has to be located at a
            Shell petrol station in order to make this call. A user is
            recognised as being located at a Shell station if the user’s
            current location (as determined by GPS) is within 300 meters of a
            Shell station. Expectation is that requester will have established
            the Shell petrol station the user is located at prior to making
            this call by calling Station Locator APIs. The API will use
            stationId and siteCountry/GPS to verify the user is The user’s
            current latitude genuinely located at the specified Station.
            ‘mpp_station_id’ of the Station Locator API should be used.
            Leading ‘0’ should be dropped and only last four digits, should be
            used. E.G. for ‘00123’, only ‘0123’ should be used and for ‘04567’
            only ‘4567’ should be used.
        pump_id (str): A two digit numeric number of the pump as marked on the
            forecourt (e.g. pump number 12)
        loyalty_details (List[LoyaltyDetails]): Object containing Loyalty
            details
        source_application (str): The ID of the source application making this
            call. Each 3rd Party will be issued with its own sourceApp ID that
            must be specified correctly here  *   3rdParty_App_Archetype
        device_type (str): The type of device making this call. Permitted
            values for deviceType:  *  car  *  phone
        payment_details (List[PaymentDetailsItems]): Object containing Payment
            details
        device_details (List[PrepareFuelingRequestDeviceDetailsItems]): Object
            containing device details

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "latitude": 'latitude',
        "longitude": 'longitude',
        "station_id": 'stationId',
        "pump_id": 'pumpId',
        "source_application": 'sourceApplication',
        "payment_details": 'paymentDetails',
        "maximum_fueling_amount": 'maximumFuelingAmount',
        "loyalty_details": 'loyaltyDetails',
        "device_type": 'deviceType',
        "device_details": 'deviceDetails'
    }

    _optionals = [
        'maximum_fueling_amount',
        'loyalty_details',
        'device_type',
        'device_details',
    ]

    def __init__(self,
                 latitude=None,
                 longitude=None,
                 station_id=None,
                 pump_id=None,
                 source_application=None,
                 payment_details=None,
                 maximum_fueling_amount=APIHelper.SKIP,
                 loyalty_details=APIHelper.SKIP,
                 device_type=APIHelper.SKIP,
                 device_details=APIHelper.SKIP):
        """Constructor for the PrepareFuelingRequest class"""

        # Initialize members of the class
        self.latitude = latitude 
        self.longitude = longitude 
        if maximum_fueling_amount is not APIHelper.SKIP:
            self.maximum_fueling_amount = maximum_fueling_amount 
        self.station_id = station_id 
        self.pump_id = pump_id 
        if loyalty_details is not APIHelper.SKIP:
            self.loyalty_details = loyalty_details 
        self.source_application = source_application 
        if device_type is not APIHelper.SKIP:
            self.device_type = device_type 
        self.payment_details = payment_details 
        if device_details is not APIHelper.SKIP:
            self.device_details = device_details 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        latitude = dictionary.get("latitude") if dictionary.get("latitude") else None
        longitude = dictionary.get("longitude") if dictionary.get("longitude") else None
        station_id = dictionary.get("stationId") if dictionary.get("stationId") else None
        pump_id = dictionary.get("pumpId") if dictionary.get("pumpId") else None
        source_application = dictionary.get("sourceApplication") if dictionary.get("sourceApplication") else None
        payment_details = None
        if dictionary.get('paymentDetails') is not None:
            payment_details = [PaymentDetailsItems.from_dictionary(x) for x in dictionary.get('paymentDetails')]
        maximum_fueling_amount = dictionary.get("maximumFuelingAmount") if dictionary.get("maximumFuelingAmount") else APIHelper.SKIP
        loyalty_details = None
        if dictionary.get('loyaltyDetails') is not None:
            loyalty_details = [LoyaltyDetails.from_dictionary(x) for x in dictionary.get('loyaltyDetails')]
        else:
            loyalty_details = APIHelper.SKIP
        device_type = dictionary.get("deviceType") if dictionary.get("deviceType") else APIHelper.SKIP
        device_details = None
        if dictionary.get('deviceDetails') is not None:
            device_details = [PrepareFuelingRequestDeviceDetailsItems.from_dictionary(x) for x in dictionary.get('deviceDetails')]
        else:
            device_details = APIHelper.SKIP
        # Return an object of this model
        return cls(latitude,
                   longitude,
                   station_id,
                   pump_id,
                   source_application,
                   payment_details,
                   maximum_fueling_amount,
                   loyalty_details,
                   device_type,
                   device_details)
