# -*- coding: utf-8 -*-

"""
shellev

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellev.api_helper import APIHelper


class PaymentProperties(object):

    """Implementation of the 'PaymentProperties' model.

    Object containing Payment Property details Please note:
       All the attributes are optional as they serve all payment methods (i.e.
       different payment methods require different fields to be
       filled/mandated). As a result, some of these fields will be mandatory
       depending on the selected payment method and the API will return an
       error if they are not completed

    Attributes:
        payment_type (str): The type of payment (e.g. Credit Card, Debit
            Card)
        client_metadata_id (str): This is only used for PayPal. During the
            creation of the user’s profile an ID (clientMetadataId) will have
            been created by PayPal and stored by Shell. Thus, when PayPal
            payments are made this ID must be included in order for the
            payment to be processed
        token (str): This is only used for ApplePay and AndroidPay. Users
            using either of these payment methods use device biometrics to
            authenticate themselves against their respective payment
            method/provider (e.g. retina, fingerprint). Successful
            authentication will result in Apple/Android issuing a Payment
            Token which should be specified here
        identifier (str): This is the payment identifier and it is only used
            for ApplePay and AndroidPay.
        network (str): This is the payment network (e.g. Visa, Mastercard) and
            it is only used for ApplePay and AndroidPay.
        card_identifier (str): This is only relevant for transactions made by
            B2B customers using the Shell Card payment method. The
            ‘cardIdentifier’ is the unique identifier provided by Commercial
            Fleet and shared with the Shell mobile payments platform. This
            reference ID is used in interactions with the Commercial Fleet
            application to retrieve the fueling token - use the cardIdentifier
            when requesting a DPAN.
        odometer (str): This is only relevant for transactions made by B2B
            customers using a Shell Card payment method. During set up of the
            user’s Shell Card it’s possible to configure the card such that
            users are forced to provide an odometer reading before a Sale can
            begin processing. This field must be filled if the B2B user’s
            Shell Card has been configured this way but will be left blank in
            all other cases.
        fleet_id (str): Only relevant if Customer attempting to pay with B2B
            Shell Card. Customers attempting to pay with a B2B Shell Card may
            have to specify their Fleet ID as an extra authorisation/security
            step. Shell Card configuration will determine whether or not Fleet
            ID needs to be provided. Please note this field is a 6 character
            numeric field.
        external_ref_id (str): This is only used for transactions made by B2B
            customers using the Shell Card payment method.    In this scenario
            the expectation is that :\ a B2B entity has been successfully
            created that includes the external party’s reference for the
            entity (e.g. Contract Number, VRN, customer email); a new Shell
            Card (SFC) has been successfully created; and Shell Card and B2B
            Entity have been linked.     externalRefId refers to the 3rd
            Parties External Reference for the B2B entity and will therefore
            be used to verify the Customer and SFC before attempting to
            process a payment using the SFC card

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "card_identifier": 'cardIdentifier',
        "payment_type": 'paymentType',
        "client_metadata_id": 'clientMetadataId',
        "token": 'token',
        "identifier": 'identifier',
        "network": 'network',
        "odometer": 'odometer',
        "fleet_id": 'fleetId',
        "external_ref_id": 'externalRefId'
    }

    _optionals = [
        'payment_type',
        'client_metadata_id',
        'token',
        'identifier',
        'network',
        'odometer',
        'fleet_id',
        'external_ref_id',
    ]

    def __init__(self,
                 card_identifier=None,
                 payment_type=APIHelper.SKIP,
                 client_metadata_id=APIHelper.SKIP,
                 token=APIHelper.SKIP,
                 identifier=APIHelper.SKIP,
                 network=APIHelper.SKIP,
                 odometer=APIHelper.SKIP,
                 fleet_id=APIHelper.SKIP,
                 external_ref_id=APIHelper.SKIP):
        """Constructor for the PaymentProperties class"""

        # Initialize members of the class
        if payment_type is not APIHelper.SKIP:
            self.payment_type = payment_type 
        if client_metadata_id is not APIHelper.SKIP:
            self.client_metadata_id = client_metadata_id 
        if token is not APIHelper.SKIP:
            self.token = token 
        if identifier is not APIHelper.SKIP:
            self.identifier = identifier 
        if network is not APIHelper.SKIP:
            self.network = network 
        self.card_identifier = card_identifier 
        if odometer is not APIHelper.SKIP:
            self.odometer = odometer 
        if fleet_id is not APIHelper.SKIP:
            self.fleet_id = fleet_id 
        if external_ref_id is not APIHelper.SKIP:
            self.external_ref_id = external_ref_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        card_identifier = dictionary.get("cardIdentifier") if dictionary.get("cardIdentifier") else None
        payment_type = dictionary.get("paymentType") if dictionary.get("paymentType") else APIHelper.SKIP
        client_metadata_id = dictionary.get("clientMetadataId") if dictionary.get("clientMetadataId") else APIHelper.SKIP
        token = dictionary.get("token") if dictionary.get("token") else APIHelper.SKIP
        identifier = dictionary.get("identifier") if dictionary.get("identifier") else APIHelper.SKIP
        network = dictionary.get("network") if dictionary.get("network") else APIHelper.SKIP
        odometer = dictionary.get("odometer") if dictionary.get("odometer") else APIHelper.SKIP
        fleet_id = dictionary.get("fleetId") if dictionary.get("fleetId") else APIHelper.SKIP
        external_ref_id = dictionary.get("externalRefId") if dictionary.get("externalRefId") else APIHelper.SKIP
        # Return an object of this model
        return cls(card_identifier,
                   payment_type,
                   client_metadata_id,
                   token,
                   identifier,
                   network,
                   odometer,
                   fleet_id,
                   external_ref_id)
