# -*- coding: utf-8 -*-

"""
shellev

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellev.api_helper import APIHelper
from shellev.models.around_location_array_data_items_loc import AroundLocationArrayDataItemsLoc
from shellev.models.around_location_array_data_items_opening_hours_items import AroundLocationArrayDataItemsOpeningHoursItems


class AroundLocationArrayDataItems(object):

    """Implementation of the 'aroundLocationArrayDataItems' model.

    TODO: type model description here.

    Attributes:
        id (str): The station’s unique site identifier – this must be ignored
        mtype (int): All fuel stations are of at least one Type, indicating
            whether it is Shell-branded or not, and if the station can be used
            by trucks. Note that a station can have more than one Type (e.g.
            Shell retail sites (Type=0) can also be truck friendly (Type=2)). 
            Type values are as follows: *  0 = Shell owned/branded stations
            that are not also Type=2 or Type=3 *  1 = Partner stations
            accepting Shell Card   *  2 = Shell owned/branded stations that
            are truck friendly but not Type=3 *  3 = Shell owned/branded
            stations that are truck only
        name (str): The name of the site
        addr (str): The side address as a concatenation of address
            information
        lat (float): The site’s latitude
        lon (float): The site’s longitude
        amen (List[int]): An array of amenities available at the station (see
            above for complete list)
        fuel (List[int]): An array of fuels* available at the station.  Global
            Product Group names:  *  8 = CNG  *  10 = Premium Gasoline  *  11
            = Premium Diesel  *  12 = Fuelsave Midgrade Gasoline  *  13 =
            Fuelsave Regular Diesel  *  14 = Midgrade Gasoline  *  15 = Low
            Octane gasoline  *  16 = Regular Diesel  *  17 = Autogas LPG  * 
            18 = Auto/RV Propane  *  20 = Hydrogen  *  21 = Kerosene  *  22 =
            Super Premium Gasoline  *  23 = Unleaded Super  *  24 = Truck
            Diesel  *  25 = Super98  *  26 = GTL  *  27 = Fuelsave 98  *  28 =
            LNG  *  29 = DieselFit  *  30 = Shell Recharge    *An external
            mapping table may need to be maintained if it is required to
            display true fuel product names (as visible on the site)
        loc (AroundLocationArrayDataItemsLoc): Object containing address
            details/elements
        mpp_station_id (str): This is the 5-digit Shell Station ID. Leading
            ‘0’ should be dropped and only last four digits, should be used.
            E.G. for ‘00123’, only ‘0123’ should be used and for ‘04567’ only
            ‘4567’ should be used.
        double_site_id (str): The Mobile Payment Platform recognises a user
            being located at a Shell Station if their GPS is within 300m of a
            Shell station. Some locations will return multiple Shell Stations
            within a 300 meter radius. This is an issue for Mobile Payments as
            it needs  to accurately identify the station the Customer is
            located at to ensure the correct pump is released   In Germany
            such locations have been identified and each Station has been
            assigned a unique letter (e.g. A, B, C). These letters are clearly
            visible at the stations. If a Mobile Payments user is located at
            such a location, they will need to identify the Station by
            identifying and specifying the Station’s corresponding letter as
            part of the refuelling journey.   The double_site_id is used to
            store the Stations unique letter/ID value. It’s only populated
            if/when 1 or more stations are within 300m from this station.
        opening_hours (List[AroundLocationArrayDataItemsOpeningHoursItems]):
            An Array of the station’s opening hours. This may have opening and
            closing times in hours, minutes and the day of the week.
        telephone (str): Station’s contact telephone number
        authorisation_code (str): Station’s authorisation code
        mp_preauth (int): Station’s mobile payment preauthorisation value

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "mtype": 'type',
        "name": 'name',
        "addr": 'addr',
        "lat": 'lat',
        "lon": 'lon',
        "amen": 'amen',
        "fuel": 'fuel',
        "loc": 'loc',
        "mpp_station_id": 'mpp_station_id',
        "double_site_id": 'double_site_id',
        "opening_hours": 'opening_hours',
        "telephone": 'telephone',
        "authorisation_code": 'authorisation_code',
        "mp_preauth": 'mp_preauth'
    }

    _optionals = [
        'double_site_id',
        'opening_hours',
        'telephone',
        'authorisation_code',
        'mp_preauth',
    ]

    def __init__(self,
                 id=None,
                 mtype=None,
                 name=None,
                 addr=None,
                 lat=None,
                 lon=None,
                 amen=None,
                 fuel=None,
                 loc=None,
                 mpp_station_id=None,
                 double_site_id=APIHelper.SKIP,
                 opening_hours=APIHelper.SKIP,
                 telephone=APIHelper.SKIP,
                 authorisation_code=APIHelper.SKIP,
                 mp_preauth=APIHelper.SKIP):
        """Constructor for the AroundLocationArrayDataItems class"""

        # Initialize members of the class
        self.id = id 
        self.mtype = mtype 
        self.name = name 
        self.addr = addr 
        self.lat = lat 
        self.lon = lon 
        self.amen = amen 
        self.fuel = fuel 
        self.loc = loc 
        self.mpp_station_id = mpp_station_id 
        if double_site_id is not APIHelper.SKIP:
            self.double_site_id = double_site_id 
        if opening_hours is not APIHelper.SKIP:
            self.opening_hours = opening_hours 
        if telephone is not APIHelper.SKIP:
            self.telephone = telephone 
        if authorisation_code is not APIHelper.SKIP:
            self.authorisation_code = authorisation_code 
        if mp_preauth is not APIHelper.SKIP:
            self.mp_preauth = mp_preauth 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else None
        mtype = dictionary.get("type") if dictionary.get("type") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        addr = dictionary.get("addr") if dictionary.get("addr") else None
        lat = dictionary.get("lat") if dictionary.get("lat") else None
        lon = dictionary.get("lon") if dictionary.get("lon") else None
        amen = dictionary.get("amen") if dictionary.get("amen") else None
        fuel = dictionary.get("fuel") if dictionary.get("fuel") else None
        loc = AroundLocationArrayDataItemsLoc.from_dictionary(dictionary.get('loc')) if dictionary.get('loc') else None
        mpp_station_id = dictionary.get("mpp_station_id") if dictionary.get("mpp_station_id") else None
        double_site_id = dictionary.get("double_site_id") if dictionary.get("double_site_id") else APIHelper.SKIP
        opening_hours = None
        if dictionary.get('opening_hours') is not None:
            opening_hours = [AroundLocationArrayDataItemsOpeningHoursItems.from_dictionary(x) for x in dictionary.get('opening_hours')]
        else:
            opening_hours = APIHelper.SKIP
        telephone = dictionary.get("telephone") if dictionary.get("telephone") else APIHelper.SKIP
        authorisation_code = dictionary.get("authorisation_code") if dictionary.get("authorisation_code") else APIHelper.SKIP
        mp_preauth = dictionary.get("mp_preauth") if dictionary.get("mp_preauth") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   mtype,
                   name,
                   addr,
                   lat,
                   lon,
                   amen,
                   fuel,
                   loc,
                   mpp_station_id,
                   double_site_id,
                   opening_hours,
                   telephone,
                   authorisation_code,
                   mp_preauth)
