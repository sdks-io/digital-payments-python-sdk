# -*- coding: utf-8 -*-

"""
shellev

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellev.api_helper import APIHelper


class MppAccesTokenResponse(object):

    """Implementation of the 'MppAccesTokenResponse' model.

    TODO: type model description here.

    Attributes:
        access_token (str): It is the token used in the requests that required
            to authenticate an user.
        token_type (str): type of token provided
        expires_in (long|int): validity of the access token in seconds
        scope (str): scope for the authentication protocol

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "access_token": 'access_token',
        "token_type": 'token_type',
        "expires_in": 'expires_in',
        "scope": 'scope'
    }

    _optionals = [
        'access_token',
        'token_type',
        'expires_in',
        'scope',
    ]

    def __init__(self,
                 access_token=APIHelper.SKIP,
                 token_type='bearer',
                 expires_in=APIHelper.SKIP,
                 scope='basic openid'):
        """Constructor for the MppAccesTokenResponse class"""

        # Initialize members of the class
        if access_token is not APIHelper.SKIP:
            self.access_token = access_token 
        self.token_type = token_type 
        if expires_in is not APIHelper.SKIP:
            self.expires_in = expires_in 
        self.scope = scope 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        access_token = dictionary.get("access_token") if dictionary.get("access_token") else APIHelper.SKIP
        token_type = dictionary.get("token_type") if dictionary.get("token_type") else 'bearer'
        expires_in = dictionary.get("expires_in") if dictionary.get("expires_in") else APIHelper.SKIP
        scope = dictionary.get("scope") if dictionary.get("scope") else 'basic openid'
        # Return an object of this model
        return cls(access_token,
                   token_type,
                   expires_in,
                   scope)
