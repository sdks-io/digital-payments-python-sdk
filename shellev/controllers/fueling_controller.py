# -*- coding: utf-8 -*-

"""
shellev

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from shellev.api_helper import APIHelper
from shellev.configuration import Server
from shellev.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from shellev.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from shellev.models.mpp_acces_token_response import MppAccesTokenResponse
from shellev.models.prepare_fueling_response import PrepareFuelingResponse
from shellev.exceptions.mpp_acces_token_error_response_exception import MppAccesTokenErrorResponseException
from shellev.exceptions.api_exception import APIException
from shellev.exceptions.cancel_fueling_error_response_error_exception import CancelFuelingErrorResponseErrorException


class FuelingController(BaseController):

    """A Controller to access Endpoints in the shellev API."""
    def __init__(self, config):
        super(FuelingController, self).__init__(config)

    def mpp_token(self,
                  grant_type,
                  client_id,
                  client_secret):
        """Does a POST request to /Fueling/v1/oauth/token.

        The Digital Payments Service enables 3rd Parties to trigger the refuel
        process which, if successful, will unlock a pump/nozzle ready for
        fuelling. Enables a 3rd party to request an access token to start
        using fueling.
           APIs

        Args:
            grant_type (str): In OAuth 2.0, the term grant type refers to the
                way an application gets an access token. OAuth 2.0 defines
                several grant types, including the authorization code flow.
            client_id (str): After registering your app, you will receive a
                client ID and a client secret. The client ID is considered
                public information, and is used to build login URLs, or
                included in Javascript source code on a page.
            client_secret (str): After registering your app, you will receive
                a client ID and a client secret. The client ID is considered
                public information, and is used to build login URLs, or
                included in Javascript source code on a page. The client
                secret must be kept confidential.

        Returns:
            MppAccesTokenResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/Fueling/v1/oauth/token')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('grant_type')
                        .value(grant_type))
            .form_param(Parameter()
                        .key('client_id')
                        .value(client_id))
            .form_param(Parameter()
                        .key('client_secret')
                        .value(client_secret))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('oAuthTokenPost'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(MppAccesTokenResponse.from_dictionary)
            .local_error('401', 'Unauthorized. The request has not been applied because it lacks valid authentication credentials for the target resource.', MppAccesTokenErrorResponseException)
        ).execute()

    def mpp_prepare_fueling(self,
                            site_country,
                            currency,
                            body):
        """Does a POST request to /Fueling/v1/fueling.

        Enables a 3rd party to request to unlock a pump so that they may fill
        up to a pre-authorised limit. The fuel types that are unlocked may
        also be determined by permitted fuels stored against the user/entity
        profile

        Args:
            site_country (str): Country ISO code
            currency (str): Currency ISO code
            body (PrepareFuelingRequest): TODO: type description here.

        Returns:
            PrepareFuelingResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/Fueling/v1/fueling')
            .http_method(HttpMethodEnum.POST)
            .query_param(Parameter()
                         .key('siteCountry')
                         .value(site_country))
            .query_param(Parameter()
                         .key('currency')
                         .value(currency))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(And(Single('oAuthTokenPost'), Single('MppToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PrepareFuelingResponse.from_dictionary)
            .local_error('400', 'Error Occurred. Request did not include bearer token or token provided and is invalid.', APIException)
            .local_error('401', 'Unauthorized', APIException)
            .local_error('403', 'Forbidden. Requestor is not permitted to call the API', APIException)
            .local_error('404', 'Not Found. Request received by the server but requested URL not found', APIException)
        ).execute()

    def mpp_cancel_fueling(self,
                           mpp_transaction_id):
        """Does a DELETE request to /Fueling/v1/fueling/{mppTransactionId}.

        Enables a partner user to cancel pump reservation from the App

        Args:
            mpp_transaction_id (str): The ID of the transaction thatâ€™s being
                cancelled

        Returns:
            void: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/Fueling/v1/fueling/{mppTransactionId}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('mppTransactionId')
                            .value(mpp_transaction_id)
                            .should_encode(True))
            .auth(And(Single('oAuthTokenPost'), Single('MppToken')))
        ).execute()
