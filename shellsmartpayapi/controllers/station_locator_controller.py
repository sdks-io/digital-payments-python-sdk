# -*- coding: utf-8 -*-

"""
shellsmartpayapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from shellsmartpayapi.api_helper import APIHelper
from shellsmartpayapi.configuration import Server
from shellsmartpayapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from shellsmartpayapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from shellsmartpayapi.models.around_location_array import AroundLocationArray
from shellsmartpayapi.exceptions.station_locator_bad_request_exception import StationLocatorBadRequestException
from shellsmartpayapi.exceptions.station_locator_unauthorized_exception import StationLocatorUnauthorizedException
from shellsmartpayapi.exceptions.station_locator_forbidden_exception import StationLocatorForbiddenException
from shellsmartpayapi.exceptions.station_locator_not_found_exception import StationLocatorNotFoundException
from shellsmartpayapi.exceptions.station_locator_internal_server_error_exception import StationLocatorInternalServerErrorException


class StationLocatorController(BaseController):

    """A Controller to access Endpoints in the shellsmartpayapi API."""
    def __init__(self, config):
        super(StationLocatorController, self).__init__(config)

    def stationlocator_v_1_stations_get_around_location(self,
                                                        m,
                                                        lon,
                                                        lat,
                                                        radius,
                                                        offer_code=None,
                                                        n=None,
                                                        amenities=None,
                                                        countries=None,
                                                        mtype=None):
        """Does a GET request to /SiteData/v1/stations.

        Returns all sites within specified radius of specified GPS location.
        Sites of all Types are returned. This call must be used when
        attempting to establish the station the user is located at as part of
        fuelling journey (i.e. user has to be within 300m of station to be
        considered located at the station). This API could also be used as a
        general query to find nearby Shell locations

        Args:
            m (str): API Method to be executed
            lon (float): The user’s current longitude
            lat (float): The user’s current latitude
            radius (float): The search radius in kilometers
            offer_code (str, optional): This enables requestor to specify
                locations that will honour the specified (advanced) offer code
            n (int, optional): This enables requestor to limit the number of
                locations that are returned and defaulted to a maximum of 250
                locations. Locations returned based on distance to User’s
                location as-the-crow-flies.
            amenities (List[str], optional): This enables requestor to filter
                locations based on one or more amenities (e.g. Filter
                locations so that only those with a Toilet are returned).
            countries (List[str], optional): This enables requestor to filter
                locations based on one or more Countries (i.e. by country
                codes).
            mtype (TypeEnum, optional): All fuel stations are of at least one
                Type, indicating whether it is Shell-branded or not, and if
                the station can be used by trucks. Note that a station can
                have more than one Type (e.g. Shell retail sites (Type=0) can
                also be truck friendly (Type=2)).   Type values are as
                follows:    * 0 = Shell owned/branded stations that are not
                also Type=2 or Type=3   * 1 = Partner stations accepting Shell
                Card   * 2 = Shell owned/branded stations that are truck
                friendly but not Type=3   * 3 = Shell owned/branded stations
                that are truck only   <br/>**When type is not provided, API
                will return type 0 and 2 only.**

        Returns:
            AroundLocationArray: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SHELL)
            .path('/SiteData/v1/stations')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('m')
                         .value(m))
            .query_param(Parameter()
                         .key('lon')
                         .value(lon))
            .query_param(Parameter()
                         .key('lat')
                         .value(lat))
            .query_param(Parameter()
                         .key('radius')
                         .value(radius))
            .query_param(Parameter()
                         .key('offer_code')
                         .value(offer_code))
            .query_param(Parameter()
                         .key('n')
                         .value(n))
            .query_param(Parameter()
                         .key('amenities')
                         .value(amenities))
            .query_param(Parameter()
                         .key('countries')
                         .value(countries))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('oAuthTokenPost'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AroundLocationArray.from_dictionary)
            .local_error('400', 'Bad request', StationLocatorBadRequestException)
            .local_error('401', 'Unauthorized', StationLocatorUnauthorizedException)
            .local_error('403', 'Forbbiden', StationLocatorForbiddenException)
            .local_error('404', 'Not Found', StationLocatorNotFoundException)
            .local_error('500', 'Internal Server Error', StationLocatorInternalServerErrorException)
        ).execute()
