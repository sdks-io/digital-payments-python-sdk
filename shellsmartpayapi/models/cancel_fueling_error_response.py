# -*- coding: utf-8 -*-

"""
shellsmartpayapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellsmartpayapi.api_helper import APIHelper
from shellsmartpayapi.models.mpp_error import MppError


class CancelFuelingErrorResponse(object):

    """Implementation of the 'CancelFuelingErrorResponse' model.

    # Digital Payments â€“ Errors
     This section details the structure of the response Body vs. the different
    types of errors that could be returned when Digital Payments system
    responds with a 400 Response Code. 
     | Error Code   | Error Description   | Suggested message to end user   |
     |-  |-  |-  |
     | 9342   | Transaction not cancelled, Txn number unknown   | Oops sorry!
    We are unable to cancel the transaction. Please wait for the site to
    cancel the transaction before you retry   |
     | 50004   | Transaction not cancelled, dispensing is already in progress 
    | Transaction cannot be cancelled, fueling already in progress   |
     | 50059   | Transaction not cancelable (not in a 'Processing state')   |
    Transaction cannot be cancelled, fuel has already been dispensed   |

    Attributes:
        error_code (str): The high level error code (e.g. missing data)
        error_description (str): The high level error message (e.g. mandatory
            fields have not been specified.
        errors (List[MppError]): Array of error objects. Majority of the time
            the errorCode and errorDescription will suffice

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "error_code": 'errorCode',
        "error_description": 'errorDescription',
        "errors": 'errors'
    }

    _optionals = [
        'error_code',
        'error_description',
        'errors',
    ]

    def __init__(self,
                 error_code=APIHelper.SKIP,
                 error_description=APIHelper.SKIP,
                 errors=APIHelper.SKIP):
        """Constructor for the CancelFuelingErrorResponse class"""

        # Initialize members of the class
        if error_code is not APIHelper.SKIP:
            self.error_code = error_code 
        if error_description is not APIHelper.SKIP:
            self.error_description = error_description 
        if errors is not APIHelper.SKIP:
            self.errors = errors 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        error_code = dictionary.get("errorCode") if dictionary.get("errorCode") else APIHelper.SKIP
        error_description = dictionary.get("errorDescription") if dictionary.get("errorDescription") else APIHelper.SKIP
        errors = None
        if dictionary.get('errors') is not None:
            errors = [MppError.from_dictionary(x) for x in dictionary.get('errors')]
        else:
            errors = APIHelper.SKIP
        # Return an object of this model
        return cls(error_code,
                   error_description,
                   errors)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'error_code={self.error_code!r}, '
                f'error_description={self.error_description!r}, '
                f'errors={self.errors!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'error_code={self.error_code!s}, '
                f'error_description={self.error_description!s}, '
                f'errors={self.errors!s})')
