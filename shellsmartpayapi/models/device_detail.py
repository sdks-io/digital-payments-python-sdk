# -*- coding: utf-8 -*-

"""
shellsmartpayapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellsmartpayapi.api_helper import APIHelper


class DeviceDetail(object):

    """Implementation of the 'DeviceDetail' model.

    TODO: type model description here.

    Attributes:
        device_id (str): This is the mobile device’s unique ID (Vendor ID for
            iOS vs. Android ID for Android). This is only used for
            transactions made via the Shell Mobile App and will therefore be
            mandatory for requests originating from Shell’s mobile app but can
            be ignored by all other parties.
        model (str): This is the mobile device’s model (machine
            name/systemInfo for iOS vs. Build.MODEL for Android).  This is
            only used for transactions made via the Shell Mobile App and will
            therefore be mandatory for requests originating from Shell’s
            mobile app but can be ignored by all other parties.
        os_version (str): This is the mobile device’s OS Version. This is only
            used for transactions made via the Shell Mobile App and will
            therefore be mandatory for requests originating from Shell’s
            mobile app but can be ignored by all other parties.
        other_device_information (str): This is only used for transactions
            made via Android versions of the Shell Mobile App and will
            therefore be mandatory for requests originating from Shell’s
            Android mobile app but can be ignored by all other devices and/or
            parties. This field is used to capture the Shell App build that
            was used to make this call.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "device_id": 'deviceId',
        "model": 'model',
        "os_version": 'osVersion',
        "other_device_information": 'otherDeviceInformation'
    }

    _optionals = [
        'device_id',
        'model',
        'os_version',
        'other_device_information',
    ]

    def __init__(self,
                 device_id=APIHelper.SKIP,
                 model=APIHelper.SKIP,
                 os_version=APIHelper.SKIP,
                 other_device_information=APIHelper.SKIP):
        """Constructor for the DeviceDetail class"""

        # Initialize members of the class
        if device_id is not APIHelper.SKIP:
            self.device_id = device_id 
        if model is not APIHelper.SKIP:
            self.model = model 
        if os_version is not APIHelper.SKIP:
            self.os_version = os_version 
        if other_device_information is not APIHelper.SKIP:
            self.other_device_information = other_device_information 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        device_id = dictionary.get("deviceId") if dictionary.get("deviceId") else APIHelper.SKIP
        model = dictionary.get("model") if dictionary.get("model") else APIHelper.SKIP
        os_version = dictionary.get("osVersion") if dictionary.get("osVersion") else APIHelper.SKIP
        other_device_information = dictionary.get("otherDeviceInformation") if dictionary.get("otherDeviceInformation") else APIHelper.SKIP
        # Return an object of this model
        return cls(device_id,
                   model,
                   os_version,
                   other_device_information)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'device_id={self.device_id!r}, '
                f'model={self.model!r}, '
                f'os_version={self.os_version!r}, '
                f'other_device_information={self.other_device_information!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'device_id={self.device_id!s}, '
                f'model={self.model!s}, '
                f'os_version={self.os_version!s}, '
                f'other_device_information={self.other_device_information!s})')
