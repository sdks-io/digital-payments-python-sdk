# -*- coding: utf-8 -*-

"""
shellsmartpayapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellsmartpayapi.models.collecting_company import CollectingCompany


class MobilePaymentRegistrationRequest(object):

    """Implementation of the 'MobilePaymentRegistrationRequest' model.

    TODO: type model description here.

    Attributes:
        reference_id (str): Unique Reference ID the DPAN is registered to. The
            Reference ID has been implemented to accept normal alphanumeric
            characters plus the following ‘special characters’&colon;  dot,
            underscore and hyphen. The following characters are not
            acceptable&colon; , / @ !  &num; & * ()
        pan (str): Original card PAN (generated on creation of Card (see Card
            Order Service))
        pan_expiry (str): Expiry Date associated with the PAN in format YYMM.
        period (int): Specifies how many months the DPAN should be valid for.
            If not present, the Token Server determines the expiry date using
            its default algorithm. Note that the Token Server might not
            respect this value and use configured business rules to override
            the requested validity period
        account_id (str): In Shell, a Payer can have several accounts
            (representing company branches, divisions or generally different
            cost-centers that a customer wants to group cards on). You can
            specify this property or the AccountNumber.
        payer_id (str): The Payer Id, or the Customer Id of the Payment
            Customer. In Shell, a Payer is a customer belonging to a specific
            market geography. A Payer can have several Accounts; each account
            can then have different groups of cards.
        col_co_id (str): The ID of the Collecting Company (in GFN), also known
            as Shell Code of the selected payer. This property is mandatory if
            the ColCoCode code is not passed
        collecting_companies (List[CollectingCompany]): Array of Colco Ids

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "reference_id": 'referenceId',
        "pan": 'pan',
        "pan_expiry": 'panExpiry',
        "period": 'period',
        "account_id": 'AccountId',
        "payer_id": 'PayerId',
        "col_co_id": 'ColCoId',
        "collecting_companies": 'CollectingCompanies'
    }

    def __init__(self,
                 reference_id=None,
                 pan=None,
                 pan_expiry=None,
                 period=None,
                 account_id=None,
                 payer_id=None,
                 col_co_id=None,
                 collecting_companies=None):
        """Constructor for the MobilePaymentRegistrationRequest class"""

        # Initialize members of the class
        self.reference_id = reference_id 
        self.pan = pan 
        self.pan_expiry = pan_expiry 
        self.period = period 
        self.account_id = account_id 
        self.payer_id = payer_id 
        self.col_co_id = col_co_id 
        self.collecting_companies = collecting_companies 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        reference_id = dictionary.get("referenceId") if dictionary.get("referenceId") else None
        pan = dictionary.get("pan") if dictionary.get("pan") else None
        pan_expiry = dictionary.get("panExpiry") if dictionary.get("panExpiry") else None
        period = dictionary.get("period") if dictionary.get("period") else None
        account_id = dictionary.get("AccountId") if dictionary.get("AccountId") else None
        payer_id = dictionary.get("PayerId") if dictionary.get("PayerId") else None
        col_co_id = dictionary.get("ColCoId") if dictionary.get("ColCoId") else None
        collecting_companies = None
        if dictionary.get('CollectingCompanies') is not None:
            collecting_companies = [CollectingCompany.from_dictionary(x) for x in dictionary.get('CollectingCompanies')]
        # Return an object of this model
        return cls(reference_id,
                   pan,
                   pan_expiry,
                   period,
                   account_id,
                   payer_id,
                   col_co_id,
                   collecting_companies)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'reference_id={self.reference_id!r}, '
                f'pan={self.pan!r}, '
                f'pan_expiry={self.pan_expiry!r}, '
                f'period={self.period!r}, '
                f'account_id={self.account_id!r}, '
                f'payer_id={self.payer_id!r}, '
                f'col_co_id={self.col_co_id!r}, '
                f'collecting_companies={self.collecting_companies!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'reference_id={self.reference_id!s}, '
                f'pan={self.pan!s}, '
                f'pan_expiry={self.pan_expiry!s}, '
                f'period={self.period!s}, '
                f'account_id={self.account_id!s}, '
                f'payer_id={self.payer_id!s}, '
                f'col_co_id={self.col_co_id!s}, '
                f'collecting_companies={self.collecting_companies!s})')
