# -*- coding: utf-8 -*-

"""
shellsmartpayapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellsmartpayapi.api_helper import APIHelper


class AccessTokenResponse(object):

    """Implementation of the 'AccessTokenResponse' model.

    TODO: type model description here.

    Attributes:
        access_token (str): It is the token used for the requests that
            required an authenticated user. This will be used for all the
            callback URLs.
        expires_in (str): validity of the access token in seconds
        token_type (str): Type of token provided

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "access_token": 'access_token',
        "expires_in": 'expires_in',
        "token_type": 'token_type'
    }

    _optionals = [
        'access_token',
        'expires_in',
        'token_type',
    ]

    def __init__(self,
                 access_token=APIHelper.SKIP,
                 expires_in=APIHelper.SKIP,
                 token_type='Bearer'):
        """Constructor for the AccessTokenResponse class"""

        # Initialize members of the class
        if access_token is not APIHelper.SKIP:
            self.access_token = access_token 
        if expires_in is not APIHelper.SKIP:
            self.expires_in = expires_in 
        self.token_type = token_type 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        access_token = dictionary.get("access_token") if dictionary.get("access_token") else APIHelper.SKIP
        expires_in = dictionary.get("expires_in") if dictionary.get("expires_in") else APIHelper.SKIP
        token_type = dictionary.get("token_type") if dictionary.get("token_type") else 'Bearer'
        # Return an object of this model
        return cls(access_token,
                   expires_in,
                   token_type)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'access_token={self.access_token!r}, '
                f'expires_in={self.expires_in!r}, '
                f'token_type={self.token_type!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'access_token={self.access_token!s}, '
                f'expires_in={self.expires_in!s}, '
                f'token_type={self.token_type!s})')
